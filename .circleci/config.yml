version: 2.1

preset-filter1: &WORKFLOW_BUILD_TEST_FILTER
  only:
    - develop
    - /feature.*/
    
preset-filter2: &WORKFLOW_BUILD_TEST_DEPLOY_FILTER
  only:
    - master

jobs:
  # Job named 'build' is used on API triggered builds
  build-test:
    working_directory: ~/repo
    
    environment:
      SCRIPTS: /root/repo/ci/scripts/

    docker:
      - image: zifrose/unity3d:2019.1.0f2
        
    steps:
      - add_ssh_keys:
          fingerprints:
            # SSH user key to github.com for UPM to access private repos
            - "68:91:51:8b:69:ba:53:6f:53:4a:1b:79:b5:59:9f:6a"

      # Checkout repo -> ~/repo
      - checkout

      - run:
          name: Enable permissions on scripts
          command: chmod +x $SCRIPTS/**.sh -v

      - run:
          name: Get commit range
          command: $SCRIPTS/get_commit_range.sh

      - run:
          name: Setup Unity license
          command: UNITY_LICENSE_CONTENT_B64="$UNITY_LICENSE_B64" $SCRIPTS/unity_login.sh
      
      - run:
          name: Update UPM dependencies & compile scripts
          command: $SCRIPTS/unity_update_deps.sh ~/repo
          
      - run:
          name: Obtaining Playground UI & Mellis version
          command: |
            shopt -s globstar
            
            # Get versions
            PLAYGROUND_CARCONTROLLER_VERSION="$($SCRIPTS/get_attr_version.sh ~/repo/Assets/**/CarControllerAssemblyInfo.cs)"
            echo ">>> Using Playground Car-Controller v$PLAYGROUND_CARCONTROLLER_VERSION"

            PLAYGROUND_UI_VERSION="$($SCRIPTS/get_attr_version.sh ~/repo/Library/PackageCache/se.zifro.ui*/**/ZifroPlaygroundUIAssemblyInfo.cs)"
            echo ">>> Using Playground UI v$PLAYGROUND_UI_VERSION"

            MELLIS_VERSION="$($SCRIPTS/get_dll_version.sh ~/repo/Library/PackageCache/se.zifro.mellis*/**/Mellis.dll)"
            MELLIS_PYTHON3_VERSION="$($SCRIPTS/get_dll_version.sh ~/repo/Library/PackageCache/se.zifro.mellis*/**/Mellis.Lang.Python3.dll)"
            echo ">>> Using Mellis v$MELLIS_VERSION, and Python3 module v$MELLIS_PYTHON3_VERSION"

            # Save to environment
            echo "PLAYGROUND_CARCONTROLLER_VERSION='$PLAYGROUND_CARCONTROLLER_VERSION'" >> $BASH_ENV
            echo "PLAYGROUND_UI_VERSION='$PLAYGROUND_UI_VERSION'" >> $BASH_ENV
            echo "MELLIS_VERSION='$MELLIS_VERSION'" >> $BASH_ENV
            echo "MELLIS_PYTHON3_VERSION='$MELLIS_PYTHON3_VERSION'" >> $BASH_ENV

      - run:
          name: Test Unity project
          command: $SCRIPTS/unity_test.sh ~/repo ~/tests/nunit/

      - run:
          name: Convert NUnit to JUnit xml
          when: always
          command: $SCRIPTS/nunit2junit.sh ~/tests/nunit/ ~/tests/junit/

      - store_test_results:
          name: store test results -> ~/tests/junit
          path: ~/tests/junit
          
      - run:
          command: echo 'export BUILD_STATUS="fail"' >> $BASH_ENV
          name: Setting Failure Condition
          when: on_fail
      - run:
          command: echo 'export BUILD_STATUS="success"' >> $BASH_ENV
          name: Setting Success Condition
          when: on_success
          
      - run:
          name: Send Slack notification
          when: always
          command: $SCRIPTS/slack_notify_testrunner.sh

  build-webgl:
    working_directory: ~/repo
    
    environment:
      SCRIPTS: /root/repo/ci/scripts/

    docker:
      - image: zifrose/unity3d-webgl:2019.1.0f2

    steps:
      # Checkout repo -> ~/repo
      - checkout

      - run:
          name: Enable permissions on scripts
          command: chmod +x $SCRIPTS/**.sh -v

      - run:
          name: Enable permissions on scripts
          command: chmod +x $SCRIPTS/**.sh -v

      - run:
          name: Setup Unity license
          command: UNITY_LICENSE_CONTENT_B64="$UNITY_LICENSE_WEBGL_B64" $SCRIPTS/unity_login.sh
    
      # TODO: Use cache from build-test
      # TODO: Create artifact

  deploy-github-release:
    working_directory: ~/repo
    
    environment:
      SCRIPTS: /root/repo/ci/scripts/

    docker:
      - image: zifrose/unity3d:2019.1.0f2

    steps:
      # Checkout repo -> ~/repo
      - checkout

      - run:
          name: Enable permissions on scripts
          command: chmod +x $SCRIPTS/**.sh -v

      - run:
          name: Enable permissions on scripts
          command: chmod +x $SCRIPTS/**.sh -v
            
      - run:
          name: Obtaining Playground UI version
          command: |
            shopt -s globstar

            # Get versions
            PLAYGROUND_CARCONTROLLER_VERSION="$($SCRIPTS/get_attr_version.sh ~/repo/Assets/**/CarControllerAssemblyInfo.cs)"
            echo ">>> Using Playground Car-Controller v$PLAYGROUND_CARCONTROLLER_VERSION"

            # Save to environment
            echo "PLAYGROUND_CARCONTROLLER_VERSION='$PLAYGROUND_CARCONTROLLER_VERSION'" >> $BASH_ENV

      - run:
          name: Cancel if tag already exists
          command: |
            PROJECT_VERSION="${PLAYGROUND_CARCONTROLLER_VERSION?}"

            if ! [ "$PROJECT_VERSION" ]
            then
                echo "No project version. Throwing."
                exit 1
            fi

            TAG="v$PROJECT_VERSION"

            if [ "$(git tag -l "$TAG")" ]
            then
                echo "Tag \"$TAG\" already exists. Aborting."

                : ${CIRCLE_BUILD_NUM?}
                : ${CIRCLE_API_KEY?}
                : ${CIRCLE_BUILD_URL?}
                : ${CIRCLE_PROJECT_USERNAME?}
                : ${CIRCLE_PROJECT_REPONAME?}

                $SCRIPTS/slack_deploy_no_new_tag.sh
                curl -X POST -u "$CIRCLE_API_KEY:" https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM/cancel

                # Sleep to await the cancel
                sleep 10s
            else
                echo "Tag \"$TAG\" does not exist. Free to go!"
            fi
            
      - run:
          name: Add GPG login to git
          command: $SCRIPTS/git_login.sh

      - run:
          name: Download artifacts
          command: |
            $SCRIPTS/circle_download_artifacts.sh ~/artifacts

      - run:
          name: Publish release
          command: $SCRIPTS/deploy_upm.sh ~/repo ~/upm

      - run:
          name: Cancel release
          command: $SCRIPTS/deploy_github_cancel.sh
          when: on_fail

      - run:
          name: Setting Failure Condition
          command: echo 'export BUILD_STATUS="fail"' >> $BASH_ENV
          when: on_fail
      - run:
          name: Setting Success Condition
          command: echo 'export BUILD_STATUS="success"' >> $BASH_ENV
          when: on_success
          
      - run:
          name: Send Slack notification
          when: always
          command: $SCRIPTS/slack_deploy_github.sh

workflows:
  version: 2.1

  work-build-test:
    jobs:
      - build-test:
          filters:
            branches:
              <<: *WORKFLOW_BUILD_TEST_FILTER

  work-build-test-deploy:
    jobs:
      - build-test:
          filters:
            branches:
              <<: *WORKFLOW_BUILD_TEST_DEPLOY_FILTER

      - build-webgl:
          requires:
            - build-test

          filters:
            branches:
              <<: *WORKFLOW_BUILD_TEST_DEPLOY_FILTER

      - deploy-github-release:
          requires:
            - build-webgl
            
          filters:
            branches:
              <<: *WORKFLOW_BUILD_TEST_DEPLOY_FILTER
